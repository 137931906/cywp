<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
                           http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd"
       default-lazy-init="true">
    <!--<视图解析器>-->
    <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
        <property name="prefix" value="/WEB-INF/pages/"/>
        <property name="suffix" value=".jsp"/>
    </bean>
    <!--配置文件上传解析器-->
    <!--注意：这里的id必须固定，springMVC会根据此id找解析器。-->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!--文件上传最大：10M-->
        <property name="maxUploadSize" value="10485760"/>
        <property name="defaultEncoding">
            <value>UTF-8</value>
        </property>
    </bean>
    <!--会帮我们注册RequestMappingHandlerMapping的Bean-->
    <mvc:annotation-driven/>
    <!-- 对静态资源文件的访问 不配置的话，可能造成JS的静态资源无法访问 -->
    <!--在springMVC-servlet.xml中配置<mvc:default-servlet-handler />后，
    会在Spring MVC上下文中定义一个org.springframework.web.servlet.resource.DefaultServletHttpRequestHandler，
    它会像一个检查员，对进入DispatcherServlet的URL进行筛查，
    如果发现是静态资源的请求，就将该请求转由Web应用服务器默认的Servlet处理，
    如果不是静态资源的请求，才由DispatcherServlet继续处理-->
    <mvc:default-servlet-handler/>
    <mvc:resources location="/WEB-INF/js/" mapping="/js/**" ></mvc:resources>
    <mvc:resources location="/WEB-INF/layui/" mapping="/layui/**" ></mvc:resources>
    <mvc:resources location="/WEB-INF/jsp/" mapping="/jsp/**" ></mvc:resources>
    <mvc:resources location="/WEB-INF/css/" mapping="/css/**" ></mvc:resources>
    <mvc:resources location="/WEB-INF/images/" mapping="/images/**" ></mvc:resources>
    <mvc:resources location="/WEB-INF/pages/" mapping="/pages/**" ></mvc:resources>
    <!-- 自动扫描该包 -->
    <context:component-scan base-package="com.cykj"></context:component-scan>

    <!--防止中文乱码-->
    <mvc:annotation-driven>
        <mvc:message-converters register-defaults="true">
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <constructor-arg value="UTF-8" />
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>

<!--    &lt;!&ndash; 配置拦截器 &ndash;&gt;-->
<!--    <mvc:interceptors>-->
<!--        <mvc:interceptor>-->
<!--            &lt;!&ndash; 哪些方法进行拦截 &ndash;&gt;-->
<!--            <mvc:mapping path="/AdminLogin/*"/>-->
<!--            &lt;!&ndash; 哪些方法不进行拦截&ndash;&gt;-->
<!--            <mvc:exclude-mapping path="/AdminLogin/getUser"/>-->
<!--            &lt;!&ndash; 注册拦截器对象 &ndash;&gt;-->
<!--            <bean class="com.cykj.util.MyInterceptor"/>-->
<!--        </mvc:interceptor>-->
<!--    </mvc:interceptors>-->

    <!--注册校验器 -->
    <mvc:annotation-driven validator="validator"></mvc:annotation-driven>
    <bean id="validationMessageSource"
          class="org.springframework.context.support.ReloadableResourceBundleMessageSource" >
        <property name="defaultEncoding" value="UTF-8"/>
        <property name="cacheSeconds" value="120" />
    </bean>
    <bean id = "validator" class = "org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
        <property name="providerClass" value="org.hibernate.validator.HibernateValidator" />
        <property name="validationMessageSource" ref="validationMessageSource" />
    </bean>

</beans>